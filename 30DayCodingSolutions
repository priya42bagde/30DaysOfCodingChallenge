#Day1: Reverse an Array:
There are multiple approaches to reverse an array in JavaScript
Approach 1: Using the reverse() method
Approach 2: Using the spread operator
Approach 3: Using the map() method
Approach 4: Using a for...of loop
Approach 5: Using a while loop
Approach 6: Using the reduce() method
Approach 7: Using a for loop
Approach 8: Using recursion

const originalArray = [1, 2, 3, 4, 5];

1.const reversedArray = originalArray.reverse(); // [5, 4, 3, 2, 1]

2.const reversedArray = [...originalArray].reverse(); 

3.const reversedArray = originalArray.map((_, index, arr) => arr[arr.length - 1 - index]);

4.const reversedArray = [];
for (const item of originalArray) {
  reversedArray.unshift(item);
}

5.let i = originalArray.length - 1;
while (i >= 0) {
  reversedArray.push(originalArray[i]);
  i--;
}

6.const reversedArray = originalArray.reduce((acc, current) => {
  acc.unshift(current);
  return acc;
}, []);

7.const reversedArray = [];
for (let i = originalArray.length - 1; i >= 0; i--) {
  reversedArray.push(originalArray[i]);
}

8.function reverseArray(arr) {
  if (arr.length === 0) {
    return [];
  } else {
    const [first, ...rest] = arr;
    return [...reverseArray(rest), first];
  }
}
const reversedArray = reverseArray(originalArray);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Day2: Find the maximum number in an array.

There are multiple approaches in JavaScript
Approach 1: Using the Math.max() function and the spread operator
Approach 2: Using the reduce() method
Approach 3: Using the sort() method
Approach 4: Using the Math.max() function with apply()
Approach 5: Using the forEach() method
Approach 6: Using a for loop

const numbers = [12, 34, 56, 78, 90];

1.const maxNumber = Math.max(...numbers);

2.const maxNumber = numbers.reduce((max, current) => (current > max ? current : max), numbers[0]);

3.const maxNumber = numbers.slice().sort((a, b) => b - a)[0];

4.const maxNumber = Math.max.apply(null, numbers);

5.let maxNumber = numbers[0];
numbers.forEach((number) => {
  if (number > maxNumber4) {
    maxNumber = number;
  }
});

6.let maxNumber = numbers[0];
for (let i = 1; i < numbers.length; i++) {
  if (numbers[i] > maxNumber) {
    maxNumber = numbers[i];
  }
}
------------------------------------------------------------------------------------------------------------------------------------------------------
#Day3: 


const numbers = [1, 2, 3, 4, 5];

1.let sum = 0;
for (let i = 0; i < numbers.length; i++) {
  sum += numbers[i];
}

2.const sum = numbers.reduce((acc, current) => acc + current, 0);

3.let sum = 0;
numbers.forEach((number) => {
  sum += number;
});

4.let sum = 0;
for (const number of numbers) {
  sum += number;
}

5.let sum = 0;
for (const index in numbers) {
  sum += numbers[index];
}

6.let sum = 0;
let i = 0;
while (i < numbers.length) {
  sum += numbers[i];
  i++;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------
4. Remove duplicates from an array:
Approach 1: Using sets
Approach 2: Using filter
Approach 3: Using reduce:
Approach 4: Using for-of loop
Approach 5: Using forEach
Approach 6: Using indexof
Approach 7: Using map

const array = [1, 2, 2, 3, 4, 4, 5];

1.const uniqueArray = [...new Set(array)];
2.uniqueArray = array.filter((value, index, self) => self.indexOf(value) === index);
3.const uniqueArray = array.reduce((accumulator, currentValue) => {
  if (!accumulator.includes(currentValue)) {
    accumulator.push(currentValue);
  }
  return accumulator;
}, []);
4.const uniqueArray = [];
for (const item of array) {
  if (!uniqueArray.includes(item)) {
    uniqueArray.push(item);
  }
}
5.const uniqueArray = [];
array.forEach((item) => {
  if (!uniqueArray.includes(item)) {
    uniqueArray.push(item);
  }
});
6.const uniqueArray = [];
for (let i = 0; i < array.length; i++) {
  if (uniqueArray.indexOf(array[i]) === -1) {
    uniqueArray.push(array[i]);
  }
}
7.const map = new Map();
const uniqueArray = [];
for (const item of array) {
  if (!map.has(item)) {
    map.set(item, true);
    uniqueArray.push(item);
  }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------
